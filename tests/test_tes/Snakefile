from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
import os
S3 = S3RemoteProvider(access_key_id=os.environ['S3_ACCESS_KEY'], secret_access_key=os.environ['S3_SECRET_ACCESS_KEY'])

rule all:
    input:
        "output.txt",
        "output.txt.bz2",
        S3.remote("snakemake-tests/out_test11.txt", keep_local=True)

rule step1a:
    input: "testfiles/input.txt"
    output: pipe("out_1a.txt")
    message: "Step 1a"
    shell:
        """
        cat {input} > {output}
        """

rule step1b:
    input: "out_1a.txt"
    output: temp("out_1b.txt")
    resources:
        mem_mb=1000,
        disk_mb=1000,
        _cores=2,
    message: "Step 1b"
    shell:
        """
        cat {input} > {output}
        """

rule step1c:
    output: temp("out_1c.txt")
    params:
        message="hello world"
    resources:
        mem_mb=2000,
        disk_mb=2000,
        _cores=4,
    message: "Step 1c"
    script: "scripts/test_script.py"

rule step1d:
    output: temp("out_1d.txt")
    params:
        message="hello world"
    message: "Step 1d"
    run:
        with open(output[0], "w") as f:
            f.write(params.message)

rule step2:
    input:
        "out_1b.txt",
        "out_1c.txt",
        "out_1d.txt"
    output:
        "output.txt",
        "output.txt.bz2"
    conda:
        "envs/gzip.yaml"
    log: "test.log"
    shell:
        """
        cat {input[0]} >> {output[0]}
        cat {input[1]} >> {output[0]}
        cat {input[2]} >> {output[0]}
        bzip2 -c {output[0]} > {output[1]}
        echo "fine" > {log} 
        """

rule step3:
    input:
        "output.txt",
        S3.remote("snakemake-tests/file1.txt")
    output:
        S3.remote("snakemake-tests/out_test11.txt")
    shell:
        """
        cat {input[0]} >> {output[0]}
        cat {input[1]} >> {output[0]}
        """